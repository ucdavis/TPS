@{
    ViewBag.Title = "AnotherIndexedDBTest";
}
@section AdditionalScripts
{
    <script type="text/javascript" language="javascript">

        var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.msIndexedDB;
        var IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;
        var db;

        (function () {

             function initDb() {

                 var request = indexedDB.open("DataNamDB", 1);
                request.onsuccess = function (evt) {
                    //debugger;
                    db = request.result;

                    db.onversionchange = function(e) {
                        // This event is fired when a database is deleted; perhaps may also be fired if you initiated the
                        // open command with a higher version number.
                        console.log("Version change triggered, so closing database connection", e.oldVersion, e.newVersion, db);
                        db.close();
                    };
                    console.log("DB opened.", db, evt);
                    /* Code for ${db.open} */

                };

                 request.onerror = function (evt) {
                    console.log("IndexedDB error: " + evt.target.errorCode);
                };

                request.onupgradeneeded = function (evt) {
                    //debugger;
                    // This event is fired only if the requested, i.e. new version number is higher than the existing database;
                    // otherwise, it is not fired, and an error 12 is thrown, which is probably a new version number is earlier
                    // than requested version number message.

                    var localDB = evt.currentTarget.result;

                    // Check if object store with the same name already exists, and if it does, delete it before recreating it;
                    // otherwise, an error is thrown: A mutation operation was attempted on a database that did not allow mutations.
                    // NOTE: This appears to  be the only place where an objectStore can be deleted without throwing a mutation error.

                    if (localDB.objectStoreNames.contains("dataNams")) {
                        localDB.deleteObjectStore("dataNams");
                    }

                    // Make sure that an objectStore with the name does not already exist or this fails with an error.
                    // See above.
                    var objectStore = localDB.createObjectStore("dataNams", { keyPath: "id", autoIncrement: true });

                    objectStore.createIndex("NamNumber", "NamNumber", { unique: true });
                    objectStore.createIndex("Building", "Building", { unique: false });
                    objectStore.createIndex("Department", "Department", { unique: false });

                    for (i in namData) {
                        objectStore.add(namData[i]);
                    }
                };
            }

            // Output a DataNam from the objectStore to the web page,
            // including a delete link to remove the record.
            function renderDataNam(id, nam){
                var nams = $("#dataNamList")[0];
                var li = document.createElement("li");
                var a = document.createElement("a");

                var t = document.createTextNode(id + ": " + nam.NamNumber + "; " + nam.Building + "; " + nam.Room + "; " + nam.Department);

                a.addEventListener("click", function() {
                    indexedDB.deleteNam(id);
                }, false);

                a.textContent = " [Delete]";
                li.appendChild(t);
                li.appendChild(a);
                nams.appendChild(li);
            }

            function loadData() {
                var buildings = new Array();
                var departments = new Array();
                var namNumberList =  $('select#namNumbers').get(0);
                var buildingList =  $('select#buildings').get(0);
                var departmentList =  $('select#departments').get(0);

                $.getJSON("../api/nams/", function (data) {

                    // On success, 'data' contains a list of nams.
                    window.namData = [];

                    $(namNumberList).empty();
                    $(namNumberList).append($('<option selected="selected">-- Select a Nam Number --</option>').val(""));
                    $("namNumberList option[value='']").attr("selected", true);

                    $(buildingList).empty();
                    $(buildingList).append($('<option selected="selected">-- Select a Building --</option>').val(""));
                    $("buildingList option[value='']").attr("selected", true);

                    $(departmentList).empty();
                    $(departmentList).append($('<option selected="selected">-- Select a Department --</option>').val(""));
                    $("departmentList option[value='']").attr("selected", true);

                    $.each(data, function (key, val) {
                        window.namData.push({
                            'NamNumber': val.NamNumber,
                            'Building': val.Building,
                            'Room': val.Room,
                            'Department': val.Department,
                            'BillingId': val.BillingId,
                            'Vlan': val.Vlan,
                            'Status': val.Status,
                            "Port": val.Port
                        });
                        $(namNumberList).append($('<option></option>').val(val.NamNumber).html(val.NamNumber));

                        debugger;
                        var notNull = $.trim(val.Building) != "" ? true : false;
                        var exists = $.inArray(val.Building, buildings) != -1 ? true : false;
                        if (notNull && !exists)
                        {
                            buildings.push(val.Building);
                            $(buildingList).append($('<option></option>').val(val.Building).html(val.Building));
                        }
                        notNull = $.trim(val.Department) != "" ? true : false;
                        exists = val.Department != "" && $.inArray(val.Department, departments) != -1 ? true : false;
                        if (notNull && !exists)
                        {
                            departments.push(val.Department);
                            departments.sort();
                            var myString = "";
                            $.each(departments, function(i, dept) {

                              alert(myString += ", " + dept);

                            });

                            $(departmentList).append($('<option></option>').val(val.Department).html(val.Department));
                        }

                    });
                });
//                departments.sort();
//                $.each(departments, function(i, val) {
//                    debugger;
//                    alert(val);
//                });
            }

            function loadDropdown() {
                //debugger;
                alert("click me");
                var namNumberList =  $('select#namNumbers').get(0);
                $(namNumberList).empty();
                $(namNumberList).append($('<option selected="selected">-- Select a Nam Number --</option>').val(""));
                $("namNumberList option[value='']").attr("selected", true);

                var trans = db.transaction("dataNams", IDBTransaction.READ_WRITE);
                var store = trans.objectStore("dataNams");

                // Get everything in the store;
                var cursorRequest = store.openCursor();

                cursorRequest.onsuccess = function(e) {
                    // debugger;
                    var result = e.target.result;

                    if (!!result == false)
                        return;

                    $(namNumberList).append($('<option></option>').val(result.value.NamNumber).html(result.value.NamNumber));
                    result.continue();
                };
            }

            // This method uses an index cursor to get a sorted list of index values
            // with which to build the select list options.
            function loadDropdownWitName(selectList, indexName, labelName) {
                //debugger;

                var uniqueItems = new Array();
                alert("click me");  // There seems to be a delay needed for the db to init.  TODO: Add an auto delay.
                $(selectList).empty();
                $(selectList).append($('<option selected="selected">-- Select a ' + labelName + ' --</option>').val(""));
                $("selectList option[value='']").attr("selected", true);

                var trans = db.transaction("dataNams");
                var store = trans.objectStore("dataNams");
                var index = store.index(indexName);

                // Get everything in the store;
                var cursorRequest = index.openCursor().onsuccess = function(event) {
                    var cursor = event.target.result;
                    if (cursor) {
                        // cursor.key is a name, like "Bill", and cursor.value is the whole object.

                        var exists = $.inArray(cursor.key, uniqueItems) != -1 ? true : false;
                        if (!exists)
                        {
                            uniqueItems.push(cursor.key);
                            $(selectList).append($('<option></option>').val(cursor.key).html(cursor.key));

                        }
                        cursor.continue();
                    }
                };
            };

            // Once the page content has been loaded, wire up all the buttons, event listeners and database functions:
            function contentLoaded() {
                initDb();
                //loadData();
                loadDropdownWitName($('select#namNumbers').get(0), "NamNumber", "Nam Number");
                loadDropdownWitName($('select#buildings').get(0), "Building", "Building");
                loadDropdownWitName($('select#departments').get(0), "Department", "Department");

                // Add all the button related event listeners:
                var btnPrint = document.getElementById("btnPrint");
                //var btnDelete = document.getElementById("btnDelete");
                //var btnDeleteAll = document.getElementById("btnDeleteAll");
                //var btnDeleteDatabase = document.getElementById("btnDeleteDatabase");
                //var btnLoadDatabase = document.getElementById("btnLoadDatabase");

                var btnSearchByNamNumber = document.getElementById("btnSearchByNamNumber");
                //var btnSearchByBuilding = document.getElementById("btnSearchByBuilding");
                //var btnSearchByDepartment = document.getElementById("btnSearchByDepartment");
                var selectNamNumber =  $('select#namNumbers').get(0);

                //debugger;
                var selectBuilding =  $('select#buildings').get(0);

                var selectDepartment = $('select#departments').get(0);

                // This method will return a single data nam using an index "get" (by nam number) request.
                selectNamNumber.addEventListener("change", function () {
                    var output = $("#dataNamList")[0];
                    output.innerHTML = "";
                    var namNumber = "";

                    $('select#namNumbers option:selected').each(function () {
                        //debugger;
                            namNumber = $(this).val();
                    });

                    if (namNumber != ""){

                        var objectStore = db.transaction("dataNams").objectStore("dataNams");
                        var index = objectStore.index("NamNumber");
                        index.get(namNumber).onsuccess = function (evt) {
                            //debugger;
                            renderDataNam(evt.target.result.id, evt.target.result);
                        };
                    }
                }, false);

                // This method will return one or more data nams with a matching building.
                // It uses an index cursor with an IDBKeyRange of "only" in order to return the just the nams with a building that matches.
                selectBuilding.addEventListener("change", function () {
                    //debugger;
                    var output = $("#dataNamList")[0];
                    output.innerHTML = "";
                    var building = "";

                    $('select#buildings option:selected').each(function () {
                        //debugger;
                            building = $(this).val();
                    });

                    if (building != ""){

                        var objectStore = db.transaction("dataNams").objectStore("dataNams");
                        var index = objectStore.index("Building");
                        var singleKeyRange = IDBKeyRange.only(building);
                        // Get everything in the store;
                        var cursorRequest = index.openCursor(singleKeyRange).onsuccess = function(event) {
                            var cursor = event.target.result;
                            if (cursor) {
                                renderDataNam(cursor.value.id, cursor.value);

                                cursor.continue ();
                            }
                        };
                    }
                }, false);

                // This method will return one or more data nams with a matching department.
                // It uses an index cursor with an IDBKeyRange of "only" in order to return the just the nams with a department that matches.
                 selectDepartment.addEventListener("change", function () {
                    var output = $("#dataNamList")[0];
                    output.innerHTML = "";
                    var department = "";

                    $('select#departments option:selected').each(function () {
                        //debugger;
                            department = $(this).val();
                    });

                    if (department != "") {

                        var objectStore = db.transaction("dataNams").objectStore("dataNams");
                        var index = objectStore.index("Department");
                        var singleKeyRange = IDBKeyRange.only(department);
                        // Get everything in the store;
                        var cursorRequest = index.openCursor(singleKeyRange).onsuccess = function(event) {
                            var cursor = event.target.result;
                            if (cursor) {

                                renderDataNam(cursor.value.id, cursor.value);

                                cursor.continue();
                            }
                        };
                    }
                 }, false);

                // This method will return a single data nam using an index "get" (by nam number) request.
                btnSearchByNamNumber.addEventListener("click", function () {
                    var output = $("#dataNamList")[0];
                    output.innerHTML = "";
                    var namNumber = document.getElementById("txtNamNumber").value;

                    var objectStore = db.transaction("dataNams").objectStore("dataNams");
                    // Note: Index names are case sensitive!
                    var index = objectStore.index("NamNumber");
                    index.get(namNumber).onsuccess = function (evt) {
                       renderDataNam(evt.target.result.id, evt.target.result);
                    };
                }, false);

//                btnLoadDatabase.addEventListener("click", function () {

//                    loadData();

//                    console.log("Trying to delete database");
//                    try {
//                      var dbDeleteRequest = window.indexedDB.deleteDatabase("DataNamDB");
//                      dbDeleteRequest.onsuccess = function(e){
//                        console.log("Database successfully deleted");
//                        /* Code for ${db.open} */

//                      };
//                      dbDeleteRequest.onupgradeneeded = function(e){
//                          //debugger;
//                        var db = dbOpenRequest.result;
//                        console.log("Database upgrade needed");
//                        /* Code for ${db.upgrade} */
//                      };
//                      dbDeleteRequest.onerror = function(e){
//                        console.log("Error deleting DB");
//                      };
//                      dbDeleteRequest.onblocked = function(e){
//                        console.log("Deleting DB Blocked. Try closing the database and then deleting it", dbDeleteRequest.error, e.type);
//                      };
//                    } catch (e) {
//                      console.log(e);
//                    }

//                }, false);

//                btnSearchByBuilding.addEventListener("click", function () {
//                    debugger;
//                    var output = $("#dataNamList")[0];
//                    output.innerHTML = "";
//                    var building = document.getElementById("txtBuilding").value;

//                    var objectStore = db.transaction("dataNams").objectStore("dataNams");
//                    var index = objectStore.index("Building");
//                    index.get(building).onsuccess = function (evt) {
//                        debugger;
//                        var test = 0;
//                        renderDataNam(evt.target.result.id, evt.target.result);
//                    };
//                }, false);

//                btnSearchByDepartment.addEventListener("click", function () {
//                    var output = $("#dataNamList")[0];
//                    output.innerHTML = "";
//                    var department = document.getElementById("txtDepartment").value;

//                    var objectStore = db.transaction("dataNams").objectStore("dataNams");
//                    var index = objectStore.index("Department");
//                    index.get(department).onsuccess = function (evt) {
//                        debugger;
//                        renderDataNam(evt.target.result.id, evt.target.result);
//                    };
//                }, false);

//                btnDelete.addEventListener("click", function () {
//                    var id = document.getElementById("txtId").value;
//                    var transaction = db.transaction("dataNams", IDBTransaction.READ_WRITE);
//                    var objectStore = transaction.objectStore("dataNams");
//                    var request = objectStore.delete(id);
//                    request.onsuccess = function(evt) {
//                        // It's gone!
//                    };
//                 }, false);

//                btnDeleteAll.addEventListener("click", function () {
//                    var transaction = db.transaction("dataNams", IDBTransaction.READ_WRITE);
//                    var objectStore = transaction.objectStore("dataNams");
//                    var request = objectStore.clear();
//                    request.onsuccess = function (evt) {
//                        // do something after the clear succeeded
//                        $("#printOutput")[0].innerHTML = "";
//                        $("#dataNamList")[0].innerHTML = "";
//                    };
//                 }, false);

//                btnDeleteDatabase.addEventListener("click", function () {
//                    console.log("Trying to delete database");
//                    try {
//                      var dbDeleteRequest = window.indexedDB.deleteDatabase("DataNamDB");
//                      dbDeleteRequest.onsuccess = function(e){
//                        console.log("Database successfully deleted");
//                        /* Code for ${db.open} */
//                      };
//                      dbDeleteRequest.onupgradeneeded = function(e){
//                          //debugger;
//                        var db = dbOpenRequest.result;
//                        console.log("Database upgrade needed");
//                        /* Code for ${db.upgrade} */
//                      };
//                      dbDeleteRequest.onerror = function(e){
//                        console.log("Error deleting DB");
//                      };
//                      dbDeleteRequest.onblocked = function(e){
//                        console.log("Deleting DB Blocked. Try closing the database and then deleting it", dbDeleteRequest.error, e.type);
//                      };
//                    } catch (e) {
//                      console.log(e);
//                    }
//                 }, false);

                btnPrint.addEventListener("click", function() {

                    var output = document.getElementById("printOutput");
                    output.textContent = "";

                    var transaction = db.transaction("dataNams", IDBTransaction.READ_WRITE);
                    var objectStore = transaction.objectStore("dataNams");

                    var request = objectStore.openCursor();
                    request.onsuccess = function(evt) {
                        var cursor = evt.target.result;

                        if (cursor) {
                            output.innerHTML += "id: " + cursor.key + " is " + cursor.value.NamNumber + "<br />";
                            cursor.continue();
                        } else {
                            console.log("No more entries!");
                        }
                    };
                }, false);

                 // Add all the database, non-button related functions:

                indexedDB.onerror = function(e) {
                    console.log(e);
                };

                indexedDB.deleteNam = function(id) {
                    var trans = db.transaction("dataNams", IDBTransaction.READ_WRITE);
                    var store = trans.objectStore("dataNams");

                    var request = store.delete(id);

                    request.onsuccess = function(e) {
                        indexedDB.getAll();
                    };

                    request.onerror = function(e) {
                        console.log("Error Deleting: ", e);
                    };
                };

                indexedDB.getAll = function() {

                    var dataNams = $("#dataNamList")[0];
                    dataNams.innerHTML = "";

                    var trans = db.transaction("dataNams", IDBTransaction.READ_WRITE);
                    var store = trans.objectStore("dataNams");

                    // Get everything in the store;
                     var cursorRequest = store.openCursor();

                    cursorRequest.onsuccess = function(e) {
                        var result = e.target.result;

                        if(!!result == false)
                            return;

                        renderDataNam(result.key, result.value);
                        result.continue();
                    };

                    cursorRequest.onerror = indexedDB.onerror;
                };
            }
            window.addEventListener("DOMContentLoaded", contentLoaded, false);
    })();

    </script>
}
<h2>@ViewBag.Message</h2>
<hr />
<br />
<input type="button" id="btnSearchByNamNumber" value="Search by Nam Number" />
<label for="txtNamNumber">
    Nam Number:
</label>
<input type="text" id="txtNamNumber" name="txtNamNumber"></input>
<br />
<label for="namNumbers">
    Select a Nam to Search for:</label>
<select name='namNumbers' id='namNumbers' size='1'>
</select>
<br />
<label for="buildings">
    Select a Building to Search for:</label>
<select name='buildings' id='buildings' size='1'>
</select>
<br />
<label for="departments">
    Select a Department to Search for:</label>
<select name='departments' id='departments' size='1'>
</select>
<br />
<input type="button" id="btnPrint" value="Print objectStore" />
<br />
<ul>
    <div id="dataNamList">
    </div>
</ul>
<br />
<output id="printOutput"> </output>