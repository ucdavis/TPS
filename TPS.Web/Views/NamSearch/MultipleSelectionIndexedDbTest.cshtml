@{
    ViewBag.Title = "Multiple Select Indexed Db Test";
}
@section AdditionalScripts
{
    @*<script src='@Url.Script("query.js")' type="text/javascript"> </script>*@
    <script type="text/javascript" language="javascript">

        var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.msIndexedDB;
        var IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;
        var db;

        (function () {

             function initDb() {

                var request = indexedDB.open("DataNamDB", 1);
                request.onsuccess = function (evt) {
                    //debugger;
                    db = request.result;

                    db.onversionchange = function(e) {
                        // This event is fired when a database is deleted; perhaps may also be fired if you initiated the
                        // open command with a higher version number.
                        console.log("Version change triggered, so closing database connection", e.oldVersion, e.newVersion, db);
                        db.close();
                    };
                    console.log("DB opened.", db, evt);
                    /* Code for ${db.open} */

                };

                 request.onerror = function (evt) {
                    console.log("IndexedDB error: " + evt.target.errorCode);
                };

                request.onupgradeneeded = function (evt) {
                    debugger;
                    // This event is fired only if the requested, i.e. new version number is higher than the existing database;
                    // otherwise, it is not fired, and an error 12 is thrown, which is probably a new version number is earlier
                    // than requested version number message.

                    var localDB = evt.currentTarget.result;

                    // Check if object store with the same name already exists, and if it does, delete it before recreating it;
                    // otherwise, an error is thrown: A mutation operation was attempted on a database that did not allow mutations.
                    // NOTE: This appears to  be the only place where an objectStore can be deleted without throwing a mutation error.

                    if (localDB.objectStoreNames.contains("dataNams")) {
                        localDB.deleteObjectStore("dataNams");
                    }

                    // Make sure that an objectStore with the name does not already exist or this fails with an error.
                    // See above.
                    var objectStore = localDB.createObjectStore("dataNams", { keyPath: "id", autoIncrement: true });

                    objectStore.createIndex("NamNumber", "NamNumber", { unique: true });
                    objectStore.createIndex("Building", "Building", { unique: false });
                    objectStore.createIndex("Department", "Department", { unique: false });
                    objectStore.createIndex("Room", "Room", { unique: false });
                    objectStore.createIndex("Vlan", "Vlan", { unique: false });

                    for (i in namData) {
                        objectStore.add(namData[i]);
                    }
                };
            }

            // Output a DataNam from the objectStore to the web page,
            // including a delete link to remove the record.
            function renderDataNam(id, nam, nams){
                if (nams === undefined) {
                    nams = $("#dataNamList")[0];
                }
                //var nams = $("#dataNamList")[0];

                var li = document.createElement("li");
                var a = document.createElement("a");

                var t = document.createTextNode(id + ": " + nam.NamNumber + "; " + nam.Building + "; " + nam.Room + "; " + nam.Department);

                a.addEventListener("click", function() {
                    indexedDB.deleteNam(id);
                }, false);

                a.textContent = " [Delete]";
                li.appendChild(t);
                li.appendChild(a);
                nams.appendChild(li);
            }

            function loadData() {

                $.getJSON("../api/nams/", function (data) {

                    // On success, 'data' contains a list of nams.
                    window.namData = [];

                    $.each(data, function (key, val) {
                        window.namData.push({
                            'NamNumber': val.NamNumber,
                            'Building': val.Building,
                            'Room': val.Room,
                            'Department': val.Department,
                            'BillingId': val.BillingId,
                            'Vlan': val.Vlan,
                            'Status': val.Status,
                            "Port": val.Port
                        });

                    });
                });

            }

            function pausecomp(ms) {
                ms += new Date().getTime();
                while (new Date() < ms) {
                }
                alert("Click 'OK' to continue...");
           };

            function loadDropdown() {
                //debugger;
                while (db === undefined) {
                //May need to wait before server is ready.
                    pausecomp(50);
                };

                var namNumberList =  $('select#namNumbers').get(0);
                $(namNumberList).empty();
                $(namNumberList).append($('<option selected="selected">-- Select a Nam Number --</option>').val(""));
                $("namNumberList option[value='']").attr("selected", true);

                var trans = db.transaction("dataNams", IDBTransaction.READ_WRITE);
                var store = trans.objectStore("dataNams");

                // Get everything in the store;
                var cursorRequest = store.openCursor();

                cursorRequest.onsuccess = function(e) {
                    // debugger;
                    var result = e.target.result;

                    if (!!result == false)
                        return;

                    $(namNumberList).append($('<option></option>').val(result.value.NamNumber).html(result.value.NamNumber));
                    result.continue();
                };
            }

            // This method uses an index cursor to get a sorted list of index values
            // with which to build the select list options.
            function loadDropdownWitName(selectList, indexName, labelName) {
                //debugger;
                while (db === undefined) {
                //May need to wait before server is ready.
                    pausecomp(50);
                };

                var uniqueItems = new Array();
                //alert("click me");  // There seems to be a delay needed for the db to init.  TODO: Add an auto delay.
                $(selectList).empty();
                $(selectList).append($('<option selected="selected">-- Select a ' + labelName + ' --</option>').val(""));
                $("selectList option[value='']").attr("selected", true);

                var trans = db.transaction("dataNams");
                var store = trans.objectStore("dataNams");
                var index = store.index(indexName);

                // Get everything in the store;
                var cursorRequest = index.openCursor().onsuccess = function(event) {
                    var cursor = event.target.result;
                    if (cursor) {
                        // cursor.key is a name, like "Bill", and cursor.value is the whole object.

                        var exists = $.inArray(cursor.key, uniqueItems) != -1 ? true : false;
                        if (!exists)
                        {
                            uniqueItems.push(cursor.key);
                            $(selectList).append($('<option></option>').val(cursor.key).html(cursor.key));

                        }
                        cursor.continue();
                    }
                };
            };

            // Once the page content has been loaded, wire up all the buttons, event listeners and database functions:
            function contentLoaded() {
                loadData();
                initDb();

                var selectVlanList =  $('select#vlanList').get(0);
                var selectBuildingList =  $('select#buildingList').get(0);
                var selectDepartmentList = $('select#departmentList').get(0);
                loadDropdownWitName($(selectVlanList), "Vlan", "VLAN");
                loadDropdownWitName($(selectBuildingList), "Building", "Building");
                loadDropdownWitName($(selectDepartmentList), "Department", "Department");

                // Add all the button related event listeners:
                var btnPrint = document.getElementById("btnPrint");
                var btnFindNams = document.getElementById("findNams");

                var btnDeleteDatabase = document.getElementById("btnDeleteDatabase");

                function getResults(valueToSearchFor, indexName) {
                    var retval = new Array();

                     if (valueToSearchFor != "") {
                        var objectStore = db.transaction("dataNams").objectStore("dataNams");
                        var index = objectStore.index(indexName);
                        var singleKeyRange = IDBKeyRange.only(valueToSearchFor);
                        // Get everything in the store;
                        index.openCursor(singleKeyRange).onsuccess = function(event) {
                            var cursor = event.target.result;
                            if (cursor) {
                                retval.push({
                                    Id: cursor.value.id,
                                    Nam: cursor.value
                                });

                                cursor.continue();
                            }
                        };
                    }

                    return retval;
                }

                function isInArray(obj, array) {
                    var retval = false;
                    ///debugger;
                    if (array === undefined && obj === undefined) {

                    }
                    else {
                        $.each(array, function(i, val) {
                            if (obj.id == val.Id) {
                                retval = true;

                            }
                        });
                    }
                    return retval;
                }

                // This method will return one or more data nams using an index "get" (by nam number) request.
                btnFindNams.addEventListener("click", function () {
                    //debugger;
                    var output = $("#findNamsList")[0];
                    output.innerHTML = "";
                    var namNumber = document.getElementById("txtNamNumber").value;
                    var hasNamNumber = ($.trim(namNumber) != "" ? true : false);

                    var roomNumber = document.getElementById("txtRoomNumber").value;
                    var hasRoomNumber =  ($.trim(roomNumber) != "" ? true : false);

                    var vlan = "";
                    $('select#vlanList option:selected').each(function () {
                        //debugger;
                            vlan = $(this).val();
                    });
                    var hasVlan =  ($.trim(vlan) != "" ? true : false);
                    var building = "";
                    $('select#buildingList option:selected').each(function () {
                        //debugger;
                            building = $(this).val();
                    });
                    var hasBuilding =  ($.trim(building) != "" ? true : false);

                    var department = "";
                    $('select#departmentList option:selected').each(function () {
                            department = $(this).val();
                    });
                    var hasDepartment =  ($.trim(department) != "" ? true : false);

                    var hasSearchParameters = hasNamNumber || hasRoomNumber || hasVlan || hasBuilding || hasDepartment
                                          ? true
                                          : false;
                    // Quick test to verify that all of the  inputs have been detected properly.
                    //alert("Has search params: " + hasSearchParameters + "; Nam: " + hasNamNumber + " - " + namNumber + "; Room: "  + hasRoomNumber + " - " + roomNumber + "; VLAN: " + hasVlan + " - " + vlan + "; Building: " + hasBuilding + " - " +  building + "; Department: " + hasDepartment + " - " + department);

                    // First test is to see if we can get the queries linked properly to use multiple indexes:
                    if (hasSearchParameters) {

                        // Don't do anything unless there's something to search for
                        var resultSets = new Array();  // contains arrays by index names of all results from queries.
                        if (hasNamNumber) {
                            resultSets.push({ IndexName: "NamNumber", Results: getResults(namNumber, "NamNumber") });
                        }

                        if (hasRoomNumber) {
                            resultSets.push({ IndexName: "Room", Results: getResults(roomNumber, "Room") });
                        }

                        if (hasVlan) {
                            resultSets.push({ IndexName: "Vlan", Results: getResults(vlan, "Vlan") });
                        }

                        if (hasBuilding) {
                            resultSets.push({ IndexName: "Building", Results: getResults(building, "Building") });
                        }

                        if (hasDepartment) {
                            resultSets.push({ IndexName: "Department", Results: getResults(department, "Department") });
                        }
                        //debugger;
                        pausecomp(50); // Doesn't seem to work without a wait and an alert pop-up.

                        if (resultSets.length > 0) {
                            var filteredResults = new Array(); // contains results to display.
                            if (resultSets.length == 1) {
                                // Don't need any filtering if there's only one result set.
                                filteredResults = resultSets[0].Results;
                            } else {
                                // for each result set we have to look for (a) match(es).

                                for (var i = 0; i < resultSets.length; (i == 0 ? i = i + 2 : i++)) {
                                    var array1 = [];
                                    var array2 = [];

                                    if (i == 0) {
                                        // This is the first trip thru the compare logic
                                        array1 = resultSets[i].Results;
                                        array2 = resultSets[i + 1].Results;
                                    } else {
                                        // This is the second or third trip thru the compare logic.
                                        array1 = resultSets[i].Results;
                                        array2 = filteredResults.slice();
                                        filteredResults = new Array();
                                    }

                                    for (var j = 0; j < array1.length; j++) {
                                        var namToCompareTo = array1[j].Nam;
                                        if (isInArray(namToCompareTo, array2)) {
                                            //debugger;
                                            filteredResults.push({ Id: namToCompareTo.id, Nam: namToCompareTo });
                                        }
                                    }
                                }

                            }
                            $.each(filteredResults, function(ii, val) {
                                //debugger;
                                renderDataNam(val.Id, val.Nam, output);
                            });

                    }

                        // else no results were returned from index queries.

                    } // end !hasSearchParameters

                }, false);

                btnDeleteDatabase.addEventListener("click", function () {
                    console.log("Trying to delete database");
                    try {
                      var dbDeleteRequest = window.indexedDB.deleteDatabase("DataNamDB");
                      dbDeleteRequest.onsuccess = function(e){
                        console.log("Database successfully deleted");
                        /* Code for ${db.open} */

                      };
                      dbDeleteRequest.onupgradeneeded = function(e){
                          //debugger;
                        var db = dbOpenRequest.result;
                        console.log("Database upgrade needed");
                        /* Code for ${db.upgrade} */
                      };
                      dbDeleteRequest.onerror = function(e){
                        console.log("Error deleting DB");
                      };
                      dbDeleteRequest.onblocked = function(e){
                        console.log("Deleting DB Blocked. Try closing the database and then deleting it", dbDeleteRequest.error, e.type);
                      };
                    } catch (e) {
                      console.log(e);
                    }
                 }, false);

                btnPrint.addEventListener("click", function() {

                    var output = document.getElementById("printOutput");
                    output.textContent = "";

                    var transaction = db.transaction("dataNams", IDBTransaction.READ_WRITE);
                    var objectStore = transaction.objectStore("dataNams");

                    var request = objectStore.openCursor();
                    request.onsuccess = function(evt) {
                        var cursor = evt.target.result;

                        if (cursor) {
                            output.innerHTML += "id: " + cursor.key + " is " + cursor.value.NamNumber + "<br />";
                            cursor.continue();
                        } else {
                            console.log("No more entries!");
                        }
                    };
                }, false);

                 // Add all the database, non-button related functions:

                indexedDB.onerror = function(e) {
                    console.log(e);
                };

                indexedDB.deleteNam = function(id) {
                    var trans = db.transaction("dataNams", IDBTransaction.READ_WRITE);
                    var store = trans.objectStore("dataNams");

                    var request = store.delete(id);

                    request.onsuccess = function(e) {
                        indexedDB.getAll();
                    };

                    request.onerror = function(e) {
                        console.log("Error Deleting: ", e);
                    };
                };

                indexedDB.getAll = function() {

                    var dataNams = $("#dataNamList")[0];
                    dataNams.innerHTML = "";

                    var trans = db.transaction("dataNams", IDBTransaction.READ_WRITE);
                    var store = trans.objectStore("dataNams");

                    // Get everything in the store;
                     var cursorRequest = store.openCursor();

                    cursorRequest.onsuccess = function(e) {
                        var result = e.target.result;

                        if(!!result == false)
                            return;

                        renderDataNam(result.key, result.value);
                        result.continue();
                    };

                    cursorRequest.onerror = indexedDB.onerror;
                };
            }
            window.addEventListener("DOMContentLoaded", contentLoaded, false);
    })();

    </script>
}
<h2>@ViewBag.Message</h2>
<hr />
<br />
<label for="txtNamNumber">
    Nam Number:
</label>
<input type="text" id="txtNamNumber" name="txtNamNumber"></input>
<label for="txtRoomNumber">
    Room Number:
</label>
<input type="text" id="txtRoomNumber" name="txtRoomNumber"></input>
<br />
<label for="vlanList">
    Select a VLAN to search for:</label>
<select name='vlanList' id='vlanList' size='1'>
</select>
<br />
<br />
<label for="buildingList">
    Select a Building to Search for:</label>
<select name='buildingList' id='buildingList' size='1'>
</select>
<br />
<label for="departmentList">
    Select a Department to Search for:</label>
<select name='departmentList' id='departmentList' size='1'>
</select>
<br />
<label for="findNams">
    Enter a value for NAM number and/or room number and/or select a building and/or
    department:</label>
<input type="button" id="findNams" value="Find Nams" />
<br />
<ul>
    <div id="findNamsList">
    </div>
</ul>
<hr />
<br />
<input type="button" id="btnPrint" value="Print objectStore" />
<br />
<input type="button" id="btnDeleteDatabase" value="Delete Database" />
<br />
<ul>
    <div id="dataNamList">
    </div>
</ul>
<br />
<output id="printOutput"> </output>